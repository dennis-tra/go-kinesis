// Code generated by MockGen. DO NOT EDIT.
// Source: kinesis.go
//
// Generated by this command:
//
//	mockgen -source=kinesis.go -destination=client_test.go -package=kinesis -typed
//

// Package kinesis is a generated GoMock package.
package kinesis

import (
	context "context"
	reflect "reflect"

	kinesis "github.com/aws/aws-sdk-go-v2/service/kinesis"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListShards mocks base method.
func (m *MockClient) ListShards(ctx context.Context, params *kinesis.ListShardsInput, optFns ...func(*kinesis.Options)) (*kinesis.ListShardsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListShards", varargs...)
	ret0, _ := ret[0].(*kinesis.ListShardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockClientMockRecorder) ListShards(ctx, params any, optFns ...any) *MockClientListShardsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockClient)(nil).ListShards), varargs...)
	return &MockClientListShardsCall{Call: call}
}

// MockClientListShardsCall wrap *gomock.Call
type MockClientListShardsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientListShardsCall) Return(arg0 *kinesis.ListShardsOutput, arg1 error) *MockClientListShardsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientListShardsCall) Do(f func(context.Context, *kinesis.ListShardsInput, ...func(*kinesis.Options)) (*kinesis.ListShardsOutput, error)) *MockClientListShardsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientListShardsCall) DoAndReturn(f func(context.Context, *kinesis.ListShardsInput, ...func(*kinesis.Options)) (*kinesis.ListShardsOutput, error)) *MockClientListShardsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutRecords mocks base method.
func (m *MockClient) PutRecords(ctx context.Context, params *kinesis.PutRecordsInput, optFns ...func(*kinesis.Options)) (*kinesis.PutRecordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRecords", varargs...)
	ret0, _ := ret[0].(*kinesis.PutRecordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecords indicates an expected call of PutRecords.
func (mr *MockClientMockRecorder) PutRecords(ctx, params any, optFns ...any) *MockClientPutRecordsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecords", reflect.TypeOf((*MockClient)(nil).PutRecords), varargs...)
	return &MockClientPutRecordsCall{Call: call}
}

// MockClientPutRecordsCall wrap *gomock.Call
type MockClientPutRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientPutRecordsCall) Return(arg0 *kinesis.PutRecordsOutput, arg1 error) *MockClientPutRecordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientPutRecordsCall) Do(f func(context.Context, *kinesis.PutRecordsInput, ...func(*kinesis.Options)) (*kinesis.PutRecordsOutput, error)) *MockClientPutRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientPutRecordsCall) DoAndReturn(f func(context.Context, *kinesis.PutRecordsInput, ...func(*kinesis.Options)) (*kinesis.PutRecordsOutput, error)) *MockClientPutRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
